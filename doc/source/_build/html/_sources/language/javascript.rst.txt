#################
JavaScript
#################


.. contents::
   :local:

Basic
===================

基本数据类型

* Boolean
* Null
* Undefined
* Number
* String
* Symbol* ES6: `var sym = Symbol("aSymbol");`


.. code-block::

    $ node --version
    v14.13.1
    $ npm --version
    6.14.8


Closure
======================
闭包是指有权访问另一个函数作用域中的变量的函数。
创建闭包的常见方式是在一个函数内部创建另一个函数。

在全局函数中， this 等于 window, 而当函数被作为某个对象的方法调用时， this 等于那个对象。
匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window

var 定义距离最近的函数级变量或者全局变量
Let , const 定义距离最近级别的变量，包括块级变量(ES6)
const 允许定义只允许赋值一次的变量


Prototype chain
======================

当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（prototype ）。

该原型对象也有一个自己的原型对象( __proto__ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。

几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例

see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain


继承
--------------

JavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。

当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。

在 JavaScript 中，函数（function）是允许拥有属性的。所有的函数会有一个特别的属性 —— prototype 。

ECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：

Strict mode 严格模式
====================

.. code-block:: javascript

    'use strict';

* 变量必须事先声明

* 函数必须在作用域的顶部声明

* 函数参数禁止同名， arguments 对象具有更少的属性
  - 无方法的函数中的 this 的值为 undefined

* 设置或者删除不可改变的属性会抛出异常

.. code-block:: javascript

    var str = "abc";
    function strictFunc() {
        'use strict';
        str.length = 5;//type error because length property is read only
    }

* 不合格的标识符不能删除, 例如 `delete foo` 去删除全局变量是不合法的，要用下面的方法

.. code-block:: javascript

    delete window.foo; // in browser
    delete global.foo; // in nodejs

    delete this.foo; //everywhere, in global scope

* eval 更加简洁，要执行的字符串中声明的变量不会添加到 eval() 所在的作用域中
* 严格格式中以下特性被禁用

  - with 语句不能再被调用
  - 没有八进制数字


Console
====================

* console.log
* console.info
* console.warn
* console.info
* console.assert
* console.dir: output object all attributes
* console.time(label): begin to record time
* console.timeEnd(label): end to record time


function
=====================

.. code-block:: JavaScript

    var sum = (n) -> {
        var result = 0;
        for(var i=1; i <=n; i++) {
            result += i;
        }
        return result;
    }






tools
====================

grant：自动化构建工具

gulp： 自动化构建工具

babel: 编译转换器，将 ES6 转换为 ES5

ESLint: 格式检查工具


Library
==================
* https://github.com/webex/webex-js-sdk

* KineticJS <https://github.com/ericdrowell/KineticJS>_

* InteractJS <https://github.com/taye/interact.js>_