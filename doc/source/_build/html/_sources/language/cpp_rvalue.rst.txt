右值引用
=========================

.. code-block:: c++

    int i = getVar();

上面的这行代码很简单，从getVar()函数获取一个整形值，然而，这行代码会产生几种类型的值呢？
答案是会产生两种类型的值，一种是左值i，一种是函数getVar()返回的临时值，这个临时值在表达式结束后就销毁了，
而左值 i 在表达式结束后仍然存在，这个临时值就是右值，具体来说是一个纯右值，右值是不具名的。

区分左值和右值的一个简单办法是：看能不能对表达式取地址，如果能，则为左值，否则为右值。

所有的具名变量或对象都是左值，而匿名变量则是右值，比如，简单的赋值语句：

.. code-block:: c++

    int i = 0;

在这条语句中，i 是左值，0 是字面量，就是右值。在上面的代码中，i 可以被引用，0 就不可以了。
具体来说上面的表达式中等号右边的0是纯右值（prvalue），在C++11中所有的值必属于左值、将亡值、纯右值三者之一。
比如，非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和lambda表达式等都是纯右值。
而将亡值是C++11新增的、与右值引用相关的表达式，比如，将要被移动的对象、T&&函数返回值、std::move返回值和转换为T&&的类型的转换函数的返回值等。

.. code-block:: c++

    T&& k = getVar();
　
第二行代码和第一行代码很像，只是相比第一行代码多了“&&”，他就是右值引用，我们知道左值引用是对左值的引用，
那么，对应的，对右值的引用就是右值引用，而且右值是匿名变量，我们也只能通过引用的方式来获取右值。
虽然第二行代码和第一行代码看起来差别不大，但是实际上语义的差别很大，
这里，getVar()产生的临时值不会像第一行代码那样，在表达式结束之后就销毁了，而是会被“续命”，
他的生命周期将会通过右值引用得以延续，和变量k的声明周期一样长。

1. 右值引用的第一个特点

通过右值引用的声明，右值又“重获新生”，其生命周期与右值引用类型变量的生命周期一样长，只要该变量还活着，该右值临时量将会一直存活下去。

2. 右值引用的第二个特点

右值引用独立于左值和右值。意思是右值引用类型的变量可能是左值也可能是右值。比如下面的例子：

.. code-block:: c++

    int&& var1 = 1; 
　　
var1类型为右值引用，但var1本身是左值，因为具名变量都是左值。

3. 右值引用的第三个特点

    T&& t在发生自动类型推断的时候，它是未定的引用类型（universal references），
    如果被一个左值初始化，它就是一个左值；
    如果它被一个右值初始化，它就是一个右值，它是左值还是右值取决于它的初始化。

参考资料
-------------------
* https://www.cnblogs.com/qicosmos/p/4283455.html