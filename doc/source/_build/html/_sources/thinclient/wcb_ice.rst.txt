##################
Thin Client ICE
##################


ICE
=============

* ICE is a technique to collect the transport candidates which could be used in offer/answer (in m lines). The candidates are specified in the new SDP attributes, a=candidate: ….

* ICE uses STUN to get the reflective transport in the outermost NAT and/or TURN to allocate transports (in the outermost NAT and peers).

* ICE defines schemes to pair the candidates between local/remote clients, aiming to find connections between the two clients.

* ICE defines two type of clients, lite client (in public networks) and full clients (behind NAT).

* ICE defines two attributes in SDP, a=ice-pwd:xxxx and a=ice-ufrag, which could be used in the STUN and TURN attribute (USERNAME) and for message integrity.

* The STUN attribute, USERNAME is formed by cascading two peer usernames, such as client_a:client_b for messages from client a to client b. “password” is from the client which issues the messages.

* ICE-TCP defines tcp as a transport, in addition to UDP, which could be used to pass through firewall with UDP disabled.


MMP implementation
=======================

* MCS is a lite ICE client

  - No transport candidate collection (since not needed and only one candidate in public networks)
  - Will not check the connection on pairs but response to the connection check (via STUN/TURN messages)

* MCS is a STUN/TURN server

  - Thin Client will connect to MCS for connection check.
  - Port 9000 (not 3478 of the default STUN port) will be used for all connections include the mcs as a lite ice client.

* Thin Client (actually, CMSC)  is a full ICE client (so, it is a controller)

  - Need to specify the STUN/TURN servers (or MCS) for its use (iceCandidate for WebRTC)

* ice-ufrag from MCS (in answer to client offer) is used to map to the right client for the streams

  - Each client will have a different username
  - The streams could be told by the source IP and port in STUN/TURN messages.

* TCP will be used a fallback with port 443.
  - Firefox uses TURN for tcp connection; Chrome uses STUN.


CMmServerTurnServerMgr ;
----------------------------------------------------
it is m_turnServerMgr of CMmSessionServerAcceptor


CMmWorkThreadDispatcher
-----------------------------------------------------

it is m_WorkThreadDispatcher of CMmSessionServerAcceptor


IStunMessage
------------------------------------------
