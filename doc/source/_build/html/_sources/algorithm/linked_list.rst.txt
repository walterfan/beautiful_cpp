###################
Linked List 链表
###################

基本结构
====================

.. code-block::

    struct Node {
        Object data;
        Node *prev;
        Node *next;
    }





快慢指针技术
====================

问题：如何判断一个链表中是否含有闭环？
----------------------------------------
* 分析

在生活中，两个人相遇在一起谓之为环路，所以两个指针可以帮助检测环

* 解答

采用双指针，一个快指针跑得快，一个慢指针跑得慢，
如果不含有环，快指针会很快遇到 null
如果其中含有环，快指针最终会超越慢指针一圈，和慢指针相遇

* 示例

.. code-block::

    template <typename T>
    class SingleLinkedList
    {
    public:
        struct Node {
            Node(T d, Node* pn=NULL):data(d), next(pn) {}
            T data;
            Node* next;
        };

        SingleLinkedList():m_nSize(0),m_pHead(NULL) {}


        void pushBack(Node* pNode) {
            m_nSize++;
            if(!m_pHead) {
                m_pHead = pNode;
                return;
            }
            Node* pLast, *pTail;
            pLast = pTail = m_pHead;

            while(pTail != NULL && pLast->next != NULL) {
                pLast = pLast->next;
                pTail = pLast->next;
                if(pTail == pLast) break;
            }
            pLast->next = pNode;
        }
        bool hasCycle() {
            Node* pFast, *pSlow;
            pFast = pSlow = m_pHead;

            while(pFast != NULL && pFast->next != NULL) {
                //two steps
                pFast = pFast->next->next;
                //one step
                pSlow = pSlow->next;
                if(pFast == pSlow) return true;
            }
            return false;
        }

        
        friend std::ostream& operator<<(std::ostream& os, const SingleLinkedList& aList) {
                os << "SingleLinkedList: " << aList.m_nSize << ": " <<endl;
                Node* pNode = aList.m_pHead;
                while(pNode != NULL) {
                    os << pNode->data << endl;
                    pNode = pNode->next;
                    if(pNode == aList.m_pHead) break;
                }
                
                return os;
        }
    private:
        int m_nSize;
        Node* m_pHead;
    };
