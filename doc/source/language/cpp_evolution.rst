########################
C++ Evolution
########################

.. include:: ../links.ref
.. include:: ../tags.ref
.. include:: ../abbrs.ref

============ ==========================
**Abstract** C++ Evolution
**Authors**  Walter Fan
**Status**   v1
**Updated**  |date|
============ ==========================

.. |date| date::

.. contents::
   :local:

History
========================

* 1979年,基于C语言实现了C++的前身: with classes
* 1983年,正式命名为C++
* 1990年,C++标准委员会成立,C++标准化进程开始。
* 1994年,委员会完成草案登记。
* 1998年,发布C++98,第一个C++正式标准。
* 2003年,发布C++03,对C++98仅有很少的修订。
* 2011年,发布C++11,是C++标准的重大升级,增加大量新特性。
* 2014年,发布C++14,小幅度扩充
* 2017年,发布C++17,对C++14再做修订,主要增强了标准库。
* 2020年,发布C++20,增加了概念、模块、协程等重磅特性,堪比c++11


C++ 98
========================

C++98标准是C++的第一个国际标准,与早期的++相比,它有了重大进步,包括
新的语言特性,如模板、名字空间、布尔类型、类型转换关键字等
异常处理体系,包括标准的 exception和若干派生子类,以及异常规范。
输入输出流操作,这是对早期流库的重构标准化。
数值处理,在内建的整数、实数之外增加了复数和数值数组。
C89程序库,涵盖了C语言1989年的标准所定义的所有内容。
国际化支持,如 wchar、 locale等用于国际化软件开发的特性。
字符串类,如标准的 string和 wstring,使程序员可以更方便地处理字符串。
最重要的组成部分——标准库(STL),包括泛型容器、泛型算法、迭代器、函数对象、内存分配器等诸多组件。


C++ 11
========================

C++98标准并没有解决所有问题,比如它遗漏了hsh_table这样重要的数据结构,
因此1998年后,标准委员会就开始为新的标准做准备新的标准最初预计于21世纪的第
一个十年内推出。因为日期的不确定性,新标准曾经一度被称为“c++0x”
但标准的制订工作比想象要难,C++0x标准被数度延期,委员会对于要在新语言中增
加或放弃哪些特性争论不休,最终草案在2011年8月获得全票通过,并在同年9月正式
出版公布。
新的C++11标准较C++98提供了众多“与时俱进”的新特性,更容易学习和使用,对
程序员更加“友好”,也更加安全。例如:
新的nulptr关键字,取代了容易引起错误的NULL宏或0
新的 noexcept关键字,取代了原有的异常规范。
新的 constexpr关键字,编译期常量表达式,有利于模板元编程。
新的auto/decltype关键字,可以自动推导类型声明。
新的 default和 delete用法,可以明确地控制函数的实现(默认或禁用)
新的for循环语法,可以更容易地遍历容器,代码更简洁。
原始(raw)字符串,用形如R"()"的方式来书写字符串,不必用“”转义。
右值引用、完美转发和转移(move)语义,可以更高效地返回对象。
可变参数模板,可以更容易地编写泛型代码,不必使用晦涩的预处理。
语言级别的1 ambda表达式,可以非常容易地编写匿名函数对象。
废弃了异常规范、auto_ptr和关键字 export、 register
极大地增强了标准库,添加了许多新的组件,其中有数个基于Boost,如 array
bind、 function random shared_ptr、 thread、 tuple等



C++ 14
========================




C++ 17
========================





C++ 20
========================

C++20是继C++11之后的另一个重大升级,之前被移出的部分特性和库在经过更充分
的讨论后终于再次加入标准,其中,某些库已经被广大用户期待和呼吁了多年,具体如下。

* range

类似 boost range,可以用“1”串联起多个算法。
 
* span

类似 string view,是序列容器的子视图。

* module

取代include语句,更“现代化”的模块机制。

* coroutine:语言级别的协程功能。

* concurrency:语言级别的并发支持

* concept: 重新设计、精简后的概念检查库。

* network1ng: 标准内置的网络开发库